/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UserInterface.java
 *
 * Created on 02/04/2009, 11:45:34
 */

package mpc.ui;

import mpc.compiler.Parser;
import mpc.circuit.Circuit;
import mpc.protocols.MPCProtocol;
import mpc.protocols.MPCProtocolByzantineCase;
import mpc.protocols.MPCProtocolCheaterPlayer;
import mpc.protocols.MPCProtocolMultStepCheaterPlayer;
import mpc.finite_field_math.Zp;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author User
 */
public class UserInterface extends javax.swing.JFrame {

    /** Creates new form UserInterface */
    public UserInterface() {
        initComponents();
        loadHistory();
        voteComboBox.setVisible(false);
        voteLabel.setVisible(false);
          proglog=new ProgressLog(progressTextPane);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        funcConf = new javax.swing.JPanel();
        fileRadioButton = new javax.swing.JRadioButton();
        templateRadioButton = new javax.swing.JRadioButton();
        loadButton = new javax.swing.JButton();
        compileButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        funcSourceEditorPane = new javax.swing.JEditorPane();
        filePathTextField = new javax.swing.JTextField();
        templateComboBox = new javax.swing.JComboBox();
        blankRadioButton = new javax.swing.JRadioButton();
        browseButton = new javax.swing.JButton();
        playersLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        saveButton = new javax.swing.JButton();
        calcButton = new javax.swing.JButton();
        numOfPlayersTextField = new javax.swing.JTextField();
        input = new javax.swing.JPanel();
        secretLabel = new javax.swing.JLabel();
        secretTextField = new javax.swing.JTextField();
        ipLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        IPTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        launchButton = new javax.swing.JButton();
        xmlRadioButton = new javax.swing.JRadioButton();
        serverRadioButton = new javax.swing.JRadioButton();
        configurationPathTextField = new javax.swing.JTextField();
        configurationBrowseButton = new javax.swing.JButton();
        indexLabel = new javax.swing.JLabel();
        indexTextField = new javax.swing.JTextField();
        protocolLabel = new javax.swing.JLabel();
        protocolComboBox = new javax.swing.JComboBox();
        voteComboBox = new javax.swing.JComboBox();
        voteLabel = new javax.swing.JLabel();
        configurationLabel = new javax.swing.JLabel();
        connectUsingLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        progressTextPane = new javax.swing.JTextPane();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MPC");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusable(false);
        setResizable(false);

        funcConf.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Function Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N
        funcConf.setPreferredSize(new java.awt.Dimension(382, 428));

        buttonGroup1.add(fileRadioButton);
        fileRadioButton.setText("Load from file");
        fileRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(templateRadioButton);
        templateRadioButton.setText("Load a template");
        templateRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateRadioButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load function");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        compileButton.setText("Compile");
        compileButton.setEnabled(false);
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Function source"));

        funcSourceEditorPane.setEnabled(false);
        jScrollPane2.setViewportView(funcSourceEditorPane);

        templateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sum", "Multiplication", "Equality", "Vote" }));

        buttonGroup1.add(blankRadioButton);
        blankRadioButton.setSelected(true);
        blankRadioButton.setText("Blank with patern");
        blankRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blankRadioButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        playersLabel.setText("No. of players:");

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Circuit"));

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        calcButton.setText("Calc");
        calcButton.setEnabled(false);
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout funcConfLayout = new javax.swing.GroupLayout(funcConf);
        funcConf.setLayout(funcConfLayout);
        funcConfLayout.setHorizontalGroup(
            funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcConfLayout.createSequentialGroup()
                .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcConfLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(funcConfLayout.createSequentialGroup()
                                .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(blankRadioButton)
                                    .addGroup(funcConfLayout.createSequentialGroup()
                                        .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fileRadioButton)
                                            .addComponent(templateRadioButton))
                                        .addGap(0, 0, 0)
                                        .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(funcConfLayout.createSequentialGroup()
                                                .addComponent(templateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addComponent(playersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numOfPlayersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(browseButton)))
                                .addGap(56, 56, 56))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, funcConfLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(compileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(calcButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(32, 32, 32))))
                    .addGroup(funcConfLayout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(loadButton))
                    .addGroup(funcConfLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        funcConfLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {compileButton, saveButton});

        funcConfLayout.setVerticalGroup(
            funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcConfLayout.createSequentialGroup()
                .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileRadioButton)
                    .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, funcConfLayout.createSequentialGroup()
                        .addGroup(funcConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(templateRadioButton)
                            .addComponent(templateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playersLabel)
                            .addComponent(numOfPlayersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(blankRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(funcConfLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(calcButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(compileButton)
                        .addGap(63, 63, 63)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        funcConfLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {blankRadioButton, fileRadioButton});

        funcConfLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {playersLabel, templateComboBox, templateRadioButton});

        funcConfLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {compileButton, saveButton});

        input.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N
        input.setFocusCycleRoot(true);
        input.setFocusTraversalPolicyProvider(true);

        secretLabel.setLabelFor(secretTextField);
        secretLabel.setText("Enter your secret:");
        secretLabel.setEnabled(false);

        secretTextField.setToolTipText("Enter a positive integerl");
        secretTextField.setEnabled(false);
        secretTextField.setFocusTraversalPolicyProvider(true);
        secretTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secretTextFieldActionPerformed(evt);
            }
        });

        ipLabel.setText("IP: ");
        ipLabel.setEnabled(false);

        portLabel.setText("Port:");
        portLabel.setEnabled(false);

        IPTextField.setEnabled(false);
        IPTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPTextFieldActionPerformed(evt);
            }
        });

        portTextField.setToolTipText("Enter an integer 0-65000 ");
        portTextField.setEnabled(false);
        portTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTextFieldActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        launchButton.setText("Launch");
        launchButton.setEnabled(false);
        launchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(xmlRadioButton);
        xmlRadioButton.setText(" XML");
        xmlRadioButton.setEnabled(false);
        xmlRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(serverRadioButton);
        serverRadioButton.setText("Use Server:");
        serverRadioButton.setEnabled(false);
        serverRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverRadioButtonActionPerformed(evt);
            }
        });

        configurationPathTextField.setEnabled(false);

        configurationBrowseButton.setText("Browse...");
        configurationBrowseButton.setEnabled(false);
        configurationBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurationBrowseButtonActionPerformed(evt);
            }
        });

        indexLabel.setText("Enter your index:");
        indexLabel.setEnabled(false);

        indexTextField.setEnabled(false);

        protocolLabel.setText("Choose protocol:");
        protocolLabel.setEnabled(false);

        protocolComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Regular Protocol", "Byzantine Protocol", "Input Step Cheater", "Mult Step Cheater" }));
        protocolComboBox.setEnabled(false);
        protocolComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                protocolComboBoxActionPerformed(evt);
            }
        });

        voteComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "In favor", "Against", "Avoid" }));
        voteComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voteComboBoxActionPerformed(evt);
            }
        });

        voteLabel.setText("Enter your vote:");

        configurationLabel.setText("Load Configuration:");
        configurationLabel.setEnabled(false);

        connectUsingLabel.setText("Connect using:");
        connectUsingLabel.setEnabled(false);

        javax.swing.GroupLayout inputLayout = new javax.swing.GroupLayout(input);
        input.setLayout(inputLayout);
        inputLayout.setHorizontalGroup(
            inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(launchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(74, 74, 74))
            .addGroup(inputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(indexTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(267, Short.MAX_VALUE))
            .addGroup(inputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputLayout.createSequentialGroup()
                        .addComponent(secretLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(secretTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(voteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(voteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputLayout.createSequentialGroup()
                        .addComponent(protocolLabel)
                        .addGap(18, 18, 18)
                        .addComponent(protocolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputLayout.createSequentialGroup()
                        .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(inputLayout.createSequentialGroup()
                                .addComponent(configurationLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(configurationPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inputLayout.createSequentialGroup()
                                .addComponent(connectUsingLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(xmlRadioButton)
                                    .addGroup(inputLayout.createSequentialGroup()
                                        .addComponent(serverRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ipLabel)
                                        .addGap(4, 4, 4)
                                        .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(6, 6, 6)))
                        .addGap(18, 18, 18)
                        .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(configurationBrowseButton))))
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputLayout.createSequentialGroup()
                .addContainerGap(349, Short.MAX_VALUE)
                .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        inputLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, launchButton});

        inputLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {indexLabel, secretLabel, voteLabel});

        inputLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {indexTextField, secretTextField});

        inputLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {IPTextField, portTextField});

        inputLayout.setVerticalGroup(
            inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputLayout.createSequentialGroup()
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secretLabel)
                    .addComponent(voteLabel)
                    .addComponent(voteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secretTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexLabel)
                    .addComponent(indexTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(protocolLabel)
                    .addComponent(protocolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configurationBrowseButton)
                    .addComponent(configurationLabel)
                    .addComponent(configurationPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xmlRadioButton)
                    .addComponent(connectUsingLabel))
                .addGap(6, 6, 6)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel)
                    .addComponent(ipLabel)
                    .addComponent(serverRadioButton)
                    .addComponent(IPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(launchButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        inputLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, launchButton});

        inputLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {IPTextField, indexLabel, indexTextField, ipLabel, portLabel, portTextField, protocolLabel, secretLabel, secretTextField, voteLabel});

        inputLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {configurationLabel, configurationPathTextField, connectUsingLabel});

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Progress", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        progressTextPane.setFont(new java.awt.Font("Tahoma", 0, 12));
        jScrollPane1.setViewportView(progressTextPane);

        clearButton.setText("Clear");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(funcConf, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(clearButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(funcConf, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IPTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPTextFieldActionPerformed

}//GEN-LAST:event_IPTextFieldActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        enableInputFields(false);
        voteLabel.setVisible(false);
        voteComboBox.setVisible(false);
        cancelButton.setEnabled(false);
        if (blankRadioButton.isSelected())
        {
            voteSelected = false;
            equalitySelected=false;
           funcSourceEditorPane.setText("Inputs= X1, X2, X3 //according to users number\n"+
                   "Outputs=Z //according to outputs number\n"+"Z = X1 + X2 + X3 //write your function here\n");
           funcSourceEditorPane.setEnabled(true);
           funcSourceEditorPane.setEditable(true);
            saveHistory(funcSourceHistory);
            selectedButton="blank";
            saveHistory(selectedButtonHistory);
            compileButton.setEnabled(true);
            saveButton.setEnabled(true);            
        }
        else if (fileRadioButton.isSelected())
        {            
           //write file to funcSourceTextArea
            if (filePathTextField.getText().equals(""))
            {
                return;
            }
            voteSelected = false;
            equalitySelected=false;
             File file=new File(filePathTextField.getText());
             String fileName=file.getName();
             if (!fileName.endsWith(".txt"))
                {
                    file = new File(file.getPath()+".txt");
                }
              if (!file.exists())
             {
                 JOptionPane.showMessageDialog(this, "File not found",  "Warning",  JOptionPane.WARNING_MESSAGE);
                 return;
            }

            try {
                FileReader fileReader = new FileReader(file.getPath());
                try {
                    funcSourceEditorPane.read(fileReader, null);
                    funcSourceEditorPane.setEnabled(true);
                    funcSourceEditorPane.setEditable(true);
                    compileButton.setEnabled(true);
                    saveButton.setEnabled(true);
                    fileReader.close();

                    saveHistory(fileHistory);
                    saveHistory(funcSourceHistory);
                    selectedButton="file";
                    saveHistory(selectedButtonHistory);
                   
                } catch (IOException ex) {
                    Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
 }
        else if (templateRadioButton.isSelected())
        {
          //write template to funcSourceTextArea
          int numOfPlayers,halfPrime;
          halfPrime=prime/2;
            String template=templateComboBox.getSelectedItem().toString();
            try {
                numOfPlayers=Integer.parseInt(numOfPlayersTextField.getText());
                if (template.equals("Vote"))
                {                    
                    if (numOfPlayers<2 || numOfPlayers>halfPrime) {
                        JOptionPane.showMessageDialog(this, "Number of players must be an integer between 2 to "+halfPrime,  "Error",  JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                else
                {
                    if (numOfPlayers<2 || numOfPlayers>prime) {
                        JOptionPane.showMessageDialog(this, "Number of players must be an integer between 2 to "+prime,  "Error",  JOptionPane.ERROR_MESSAGE);
                        return;
                     }
                }
          }catch(NumberFormatException e){
              if (template.equals("Vote"))
                  JOptionPane.showMessageDialog(this, "Number of players must be an integer between 2 to "+halfPrime,  "Error",  JOptionPane.ERROR_MESSAGE);
              else
                  JOptionPane.showMessageDialog(this, "Number of players must be an integer between 2 to "+prime,  "Error",  JOptionPane.ERROR_MESSAGE);
           
            return;
        }
            
            noPlayers=numOfPlayers;
            printTemplate(template,numOfPlayers);
            funcSourceEditorPane.setEditable(false);
            selectedButton="template";
            saveHistory(selectedButtonHistory);
            saveHistory(templateHistory);
            saveHistory(numOfPlayersHistory);
            compileButton.setEnabled(true);
            saveButton.setEnabled(true);
            
        }

}//GEN-LAST:event_loadButtonActionPerformed

    private void blankRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blankRadioButtonActionPerformed
         blankButtonSeleceted();
}//GEN-LAST:event_blankRadioButtonActionPerformed

    private void templateRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateRadioButtonActionPerformed
        templateButtonSeleceted();
    }//GEN-LAST:event_templateRadioButtonActionPerformed

    private void fileRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileRadioButtonActionPerformed
       fileButtonSeleceted();
    }//GEN-LAST:event_fileRadioButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        fc.setFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);

        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = fc.getSelectedFile();
           filePathTextField.setText(file.getPath());           
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    
    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed

        String str=funcSourceEditorPane.getText();
        Parser parser = new Parser(str, prime);
        try
        {
            parser.parse();
            circuit=parser.getCircuit();
            
            CircuitGUI circuitGUI =  new CircuitGUI(parser.getCircuit());
            Component Canvas= circuitGUI.getCanvas();
        //   Graphics g = Canvas.getGraphics();
           jScrollPane3.setViewportView(Canvas);

           enableInputFields(true);
           setInputArea();

        }catch(Exception e){
           JOptionPane.showMessageDialog(this, "Compilation error- check syntax\n" + e.getMessage(),  "Error",  JOptionPane.ERROR_MESSAGE);
           return;
        }

        calcButton.setEnabled(true);

    }//GEN-LAST:event_compileButtonActionPerformed

    private void portTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTextFieldActionPerformed
    }//GEN-LAST:event_portTextFieldActionPerformed

    private void secretTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secretTextFieldActionPerformed

}//GEN-LAST:event_secretTextFieldActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        fc.setFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = fc.getSelectedFile();
            String fileName=file.getName();
            FileWriter fileWriter=null;
            try {
                if (fileName.endsWith(".txt"))
                {
                    fileWriter = new FileWriter(file);
                }
                else
                {
                    fileWriter = new FileWriter(file.getPath()+".txt");
                }
          
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                funcSourceEditorPane.write(fileWriter);
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
}//GEN-LAST:event_saveButtonActionPerformed

    private void launchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchButtonActionPerformed
       int secret=0, port=0, index;
       String ip=null, protocol=null;
       File configurationFile=null;

       if (voteSelected)
       {
           if (voteComboBox.getSelectedItem().toString().equals("In favor"))
               secret=1;
           if (voteComboBox.getSelectedItem().toString().equals("Against"))
               secret=-1;
           if (voteComboBox.getSelectedItem().toString().equals("Avoid"))
               secret=0;          
       }
       else //secret
       {
           String secretStr=secretTextField.getText();
          try {
            secret = Integer.parseInt(secretStr);
            if (secret<0) {
                JOptionPane.showMessageDialog(this, "Secret must be a positive integer",  "Error",  JOptionPane.ERROR_MESSAGE);
                return;
            }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Secret must be a positive integer",  "Error",  JOptionPane.ERROR_MESSAGE);
                 return;
            }
            saveHistory(secretHistory);
       }

        String indexStr=indexTextField.getText();
        try {
            index = Integer.parseInt(indexStr);
            if (index<0) {
                JOptionPane.showMessageDialog(this, "Index must be a positive integer",  "Error",  JOptionPane.ERROR_MESSAGE);
                return;
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Index must be a positive integer",  "Error",  JOptionPane.ERROR_MESSAGE);
            return;
        }
        saveHistory(indexHistory);

         if (configurationPathTextField.getText().equals(""))
         {
             JOptionPane.showMessageDialog(this, "You need to enter a configuration File ",  "Warning",  JOptionPane.WARNING_MESSAGE);
             return;
        }

        configurationFile=new File(configurationPathTextField.getText());
        if (!configurationFile.exists())
        {
            JOptionPane.showMessageDialog(this, " Configuration file not found",  "Warning",  JOptionPane.WARNING_MESSAGE);
            return;
       }
        
        saveHistory(configurationFileHistory);

        if (xmlRadioButton.isSelected()) //xml
        {
              inputSelectedButton="xml";
        }
        else //server
        {
            String portStr=portTextField.getText();
            try {
                port = Integer.parseInt(portStr);
                if (port<0 || port>65000) {
                    JOptionPane.showMessageDialog(this, "Port must be an integer 0-65000",  "Error",  JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Port must be an integer 0-65000",  "Error",  JOptionPane.ERROR_MESSAGE);
                return;
            }

            ip=IPTextField.getText();
            if (ip.equals("")) {
                JOptionPane.showMessageDialog(this, "Enter Server IP",  "Error",  JOptionPane.ERROR_MESSAGE);
                return;
            }

            saveHistory(serverHistory);
            inputSelectedButton="server";
        }

        protocol=protocolComboBox.getSelectedItem().toString();
        saveHistory(protocolHistory);
        
        saveHistory(inputSelectedButtonHistory);
        clearButton.setEnabled(true);
        proglog.printInformation("Starting calculation...");
        calculationThread = new CalculationThread(circuit, configurationFile,inputSelectedButton, ip, port,  secret, index, protocol,progressTextPane,this, proglog, launchButton, cancelButton);
	   try{
		   calculationThread.start();
	   }catch(Exception e){
		   proglog.printError("Cannot open calculation thread");
           
       }        
        cancelButton.setEnabled(true);
        launchButton.setEnabled(false);
    }//GEN-LAST:event_launchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        calculationThread.cancel();
        cancelInit=true;
        cancelButton.setEnabled(false);
        launchButton.setEnabled(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        proglog.clearProgressLog();
}//GEN-LAST:event_clearButtonActionPerformed

    private void configurationBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurationBrowseButtonActionPerformed
        xmlFc.setFileFilter(xmlFilter);
        xmlFc.setAcceptAllFileFilterUsed(false);

        int returnVal = xmlFc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = xmlFc.getSelectedFile();
           configurationPathTextField.setText(file.getPath());

        }
}//GEN-LAST:event_configurationBrowseButtonActionPerformed

    private void xmlRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlRadioButtonActionPerformed
        xmlButtonSelected();
    }//GEN-LAST:event_xmlRadioButtonActionPerformed

    private void serverRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverRadioButtonActionPerformed
        serverButtonSelected();
    }//GEN-LAST:event_serverRadioButtonActionPerformed

    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
         String inputs = (String)JOptionPane.showInputDialog(this, "Enter inputs: (input0,input1,...)\n","Internal calculation",
                    JOptionPane.PLAIN_MESSAGE,null,null,null);
          List<Zp> results;
          if (inputs==null)
            return;
         try{
             results =circuit.internalCalculate(inputs, prime);             
         }catch(Exception e){
             JOptionPane.showMessageDialog(this, e.getMessage(),  "Error",  JOptionPane.PLAIN_MESSAGE);     
             return;
         }
          String text;
           String output="";
          if (results != null)
          {
              int i = 0;
              for (Zp zp: results )
              {
                  text="result " +  i  + " is " + zp.toString() ;
                  output=output+text+"\n";
                    i++;
                }
                JOptionPane.showMessageDialog(this, output,  "Internal result",  JOptionPane.PLAIN_MESSAGE);
            }


    }//GEN-LAST:event_calcButtonActionPerformed

    private void voteComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voteComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_voteComboBoxActionPerformed

    private void protocolComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_protocolComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_protocolComboBoxActionPerformed


    public void printTemplate(String template, int numOfPlayers)
    {
       int i;
       String output="",  op="", input="", function="";
       if (template.equals("Sum"))
       {
           op="+";
           voteSelected=false;
           equalitySelected=false;
       }
       else if (template.equals("Multiplication"))
       {
           op="*";
           voteSelected=false;
           equalitySelected=false;
       }
       else if (template.equals("Equality"))
       {
           op="==";
           voteSelected=false;
           equalitySelected=true;
       }
       else if (template.equals("Vote"))
       {
           voteSelected=true;
           equalitySelected=false;
       }

       input+= "Inputs= X0";
       for (i=1; i<numOfPlayers; i++)
           input+=", "+"X"+i;

       output+="Outputs=Y\n";

      if (voteSelected)
      {
          function=input+"\n"+output+"Y = 0\n"+"Y = Y + (X0 == 1 ? 1 : (X0 == (-1) ? (-1) : 0))\n";
          for (i=1; i<numOfPlayers; i++)
              function+="Y = Y + (X"+i+" == 1 ? 1 : (X"+i+" == (-1) ? (-1) : 0))\n";
          function+="\n";
      }
      else if (equalitySelected)
      {
          function=input+"\n"+output;
          for (i=0; i<numOfPlayers-1; i++)
              function+="Y"+i+" =  (X"+i+" ==X"+(i+1)+")\n";
          function+="Y=Y0";
          for (i=1; i<numOfPlayers-1; i++)
              function+="*Y"+i;
          function+="\n";
          
      }
      else
      {
           function+=input+"\n"+output+"Y=(X0";
           for (i=1; i<numOfPlayers; i++)
               function+=op+"X"+i;
           function+=")\n";
      }
       
       funcSourceEditorPane.setText(function);
       funcSourceEditorPane.setEnabled(true);

    }
    
    public void enableInputFields(boolean bool)
    {
        secretLabel.setEnabled(bool);
        secretTextField.setEnabled(bool);
        indexLabel.setEnabled(bool);
        indexTextField.setEnabled(bool);
        protocolLabel.setEnabled(bool);
        protocolComboBox.setEnabled(bool);
        ipLabel.setEnabled(bool);
        IPTextField.setEnabled(bool);
        portLabel.setEnabled(bool);
        portTextField.setEnabled(bool);
        configurationBrowseButton.setEnabled(bool);
        configurationPathTextField.setEnabled(bool);
        xmlRadioButton.setEnabled(bool);
        serverRadioButton.setEnabled(bool);
        launchButton.setEnabled(bool);
        connectUsingLabel.setEnabled(bool);
        configurationLabel.setEnabled(bool);
    }

    public void setInputArea()
    {
        if (inputSelectedButton.equals("xml"))
        {
             xmlRadioButton.setSelected(true);
             xmlButtonSelected();
             xmlRadioButton.setFocusable(true);
        }
        else //server button
         {
            serverRadioButton.setSelected(true);
            serverButtonSelected();
            serverRadioButton.setFocusable(true);
         }
        if (voteSelected)
        {
            secretLabel.setEnabled(false);
            secretTextField.setEnabled(false);
            voteLabel.setVisible(true);
            voteComboBox.setVisible(true);
        }
        else
        {
            secretLabel.setEnabled(true);
            secretTextField.setEnabled(true);
            voteLabel.setVisible(false);
            voteComboBox.setVisible(false);
        }
    }

    public void fileButtonSeleceted()
    {
        templateComboBox.setEnabled(false);
        numOfPlayersTextField.setEnabled(false);
        playersLabel.setEnabled(false);
        browseButton.setEnabled(true);
        filePathTextField.setEnabled(true);
        fileRadioButton.setFocusable(true);
        blankRadioButton.setFocusable(false);
        templateRadioButton.setFocusable(false);        
    }

    public void blankButtonSeleceted()
    {
        templateComboBox.setEnabled(false);
        playersLabel.setEnabled(false);
        numOfPlayersTextField.setEnabled(false);
        browseButton.setEnabled(false);
        filePathTextField.setEnabled(false);
         blankRadioButton.setFocusable(true);
        fileRadioButton.setFocusable(false);
        templateRadioButton.setFocusable(false);
    }

    public void templateButtonSeleceted()
    {
        templateComboBox.setEnabled(true);
        playersLabel.setEnabled(true);
        numOfPlayersTextField.setEnabled(true);
        browseButton.setEnabled(false);
        filePathTextField.setEnabled(false);
        templateRadioButton.setFocusable(true);
        fileRadioButton.setFocusable(false);
        blankRadioButton.setFocusable(false);
    }

    public void xmlButtonSelected()
    {
        xmlRadioButton.setFocusable(true);
        serverRadioButton.setFocusable(false);
        IPTextField.setEnabled(false);
        portTextField.setEnabled(false);
        ipLabel.setEnabled(false);
        portLabel.setEnabled(false);
    }

    public void serverButtonSelected()
    {
        xmlRadioButton.setFocusable(false);
        serverRadioButton.setFocusable(true);
        IPTextField.setEnabled(true);
        portTextField.setEnabled(true);
         ipLabel.setEnabled(true);
        portLabel.setEnabled(true);
    }

        
    public static class CalculationThread extends Thread{
        private Circuit circuit;
        private String ip;
        private int port,secret;
        private File xmlFile;
        private String connectUsing;
        private JTextPane textPane;
        private Component UI;
        private ProgressLog proglog;
        private MPCProtocol mpcProtocol;
        private int index;
        private String protocol;
        private JButton launchButton;
        private JButton cancelButton;

        public CalculationThread(Circuit circuit,File xmlFile, String connectUsing, String ip, int port,  int secret, int index, String protocol, JTextPane textPane, Component UI, ProgressLog proglog, JButton launchButton, JButton cancelButton) {
            this.circuit = circuit;
            this.ip = ip;
            this.port = port;
            this.secret = secret;
            this.index=index;
            this.protocol=protocol;
            this.xmlFile=xmlFile;
            this.connectUsing=connectUsing;
            this.textPane = textPane;
            this.UI=UI;
            this.proglog=proglog;
            this.launchButton=launchButton;
            this.cancelButton=cancelButton;
        }
        @Override
        public void run() {
            
            if (protocol.equals("Regular Protocol"))
                 mpcProtocol=new MPCProtocol(circuit,proglog,index, prime);
            else if (protocol.equals("Byzantine Protocol"))
                 mpcProtocol=new MPCProtocolByzantineCase(circuit,proglog,index, prime);
            else if (protocol.equals("Input Step Cheater"))
                 mpcProtocol=new MPCProtocolCheaterPlayer(circuit, proglog,index, prime);
            else if (protocol.equals("Mult Step Cheater"))
                 mpcProtocol=new MPCProtocolMultStepCheaterPlayer(circuit, proglog,index, prime);
                
            Boolean res = false;
            if (connectUsing.equals("xml")) //use xml
            {
                    try{
                        res = mpcProtocol.init(xmlFile);
                        if (res == false) {
                            if (cancelInit)
                            {
                                proglog.printWarning("Operation canceled.");
                                cancelInit=false;
                            }
                            else
                            {
                                proglog.printError("Initialization failed.");
                                JOptionPane.showMessageDialog(UI,"Initialization failed."  ,  "Error",  JOptionPane.ERROR_MESSAGE);
                          }
                            
                            mpcProtocol.close();
                            cancelButton.setEnabled(false);
                            launchButton.setEnabled(true);
                            return;
                            }
                    }catch (IllegalArgumentException ex){
                           proglog.printError("Calculation failed: " + ex.getMessage() );
                           proglog.printInformation("Connection closed");
                            JOptionPane.showMessageDialog(UI, ex.getMessage() ,  "Error",  JOptionPane.ERROR_MESSAGE);
                            mpcProtocol.close();
                            cancelButton.setEnabled(false);
                            launchButton.setEnabled(true);
                            return;
                            }
                }else //use server
                {
                    try{
                        res = mpcProtocol.init(ip, port, xmlFile);
                        if (res == false) {
                            if (cancelInit)
                            {
                                proglog.printWarning("Operation canceled.");
                                cancelInit=false;
                            }
                            else
                            {
                                proglog.printError("Initialization failed.");
                                JOptionPane.showMessageDialog(UI,"Initialization failed."  ,  "Error",  JOptionPane.ERROR_MESSAGE);
                            }

                             mpcProtocol.close();
                            return;
                            }
                        }catch (IllegalArgumentException ex){
                           proglog.printError("Calculation failed: " + ex.getMessage() );
                           proglog.printInformation("Connection closed");
                            JOptionPane.showMessageDialog(UI, ex.getMessage() ,  "Error",  JOptionPane.ERROR_MESSAGE);
                            mpcProtocol.close();
                            cancelButton.setEnabled(false);
                            launchButton.setEnabled(true);
                            return;
                            }
                }
                           
            Zp zpSecret = new Zp(prime, secret);
            Map<Integer, Zp> results = null;
            try {
                results = mpcProtocol.calculate(zpSecret);
            } catch (IllegalStateException ex) {
                JOptionPane.showMessageDialog(UI, ex.getMessage() ,  "Error",  JOptionPane.ERROR_MESSAGE);
                 mpcProtocol.close();
                cancelButton.setEnabled(false);
                launchButton.setEnabled(true);
                return;             
            } catch (IOException ex) {
                proglog.printError("Calculation failed: " + ex.getMessage() );
                JOptionPane.showMessageDialog(UI, ex.getMessage() ,  "Error",  JOptionPane.ERROR_MESSAGE);
                mpcProtocol.close();
                cancelButton.setEnabled(false);
                launchButton.setEnabled(true);
                return;
            }
            String text;
            String output="";
            if (results != null){
                int i = 1;

               if (voteSelected)
                {
                    for (Zp zp: results.values() )
                    {
                        int sum=zp.getValue();
                        if (sum>(prime/2))
                            text="result  is against";
                        else if (sum==0)
                            text="result is a tie";
                        else
                            text="result is in favor";
                         proglog.printResult(text);
                         output=output+text+"\n";                         
                    }
                }
               else if (equalitySelected)
               {
                   for (Zp zp: results.values())
                    {
                        int sum=zp.getValue();
                        if (sum==1)
                            text="result  is equal";
                        else //(sum==0)
                            text="result is not equal";
                        proglog.printResult(text);
                         output=output+text+"\n";
                    }
               }
                else
                {
                    for (Integer outputIndex: results.keySet())
                    {
                        text="result " +  outputIndex  + " is " + results.get(outputIndex).toString() ;
                        proglog.printResult(text);
                        output=output+text+"\n";
                    }
                }
                if (!results.isEmpty()){
                    JOptionPane.showMessageDialog(UI, output,  "Result",  JOptionPane.INFORMATION_MESSAGE);                                
                }else{
                    JOptionPane.showMessageDialog(UI, "No outputs allowed for you to watch",  "Result",  JOptionPane.INFORMATION_MESSAGE);                                                    
                }

                launchButton.setEnabled(true);
                cancelButton.setEnabled(false);
            }
            mpcProtocol.close();
        }
        
        public void cancel(){
            mpcProtocol.close();            
        }
    }


    private void saveHistory(int type){
        Preferences prefs = Preferences.userNodeForPackage(getClass());
        switch (type)
        {
            case fileHistory:
            {
                prefs.put(fileKey, filePathTextField.getText());
                break;
            }
            case funcSourceHistory:
            {
                prefs.put(funcKey,funcSourceEditorPane.getText());
                break;
            }
            case secretHistory:
            {
                prefs.put(secretKey,secretTextField.getText());
                break;
            }
            case serverHistory:
            {
                prefs.put(ipKey, IPTextField.getText());
                prefs.put(portKey,portTextField.getText());
                break;
            }
            case selectedButtonHistory:
            {
                prefs.put(selectedButtonkey, selectedButton);
                break;
            }
            case inputSelectedButtonHistory:
            {
                prefs.put(inputSelectedButtonkey, inputSelectedButton);
                break;
            }
            case configurationFileHistory:
            {
                prefs.put(configurationFilekey, configurationPathTextField.getText());
                break;
            }
            case templateHistory:
            {
                prefs.put(templatekey, templateComboBox.getSelectedItem().toString());
                break;
            }
            case numOfPlayersHistory:
            {
                prefs.put(numOfPlayerskey, numOfPlayersTextField.getText());
                break;
            }
            case indexHistory:
            {
                prefs.put(indexkey, indexTextField.getText());
                break;
            }
            case protocolHistory:
            {
                prefs.put(protocolkey, protocolComboBox.getSelectedItem().toString());
                break;
            }
         }
    }

    private void loadHistory(){
        Preferences prefs = Preferences.userNodeForPackage(getClass());
        IPTextField.setText(prefs.get(ipKey, ""));//the second parameter is a default
        portTextField.setText(prefs.get(portKey, ""));
        secretTextField.setText(prefs.get(secretKey, ""));
        filePathTextField.setText(prefs.get(fileKey, ""));
        funcSourceEditorPane.setText(prefs.get(funcKey, ""));
        configurationPathTextField.setText(prefs.get(configurationFilekey,""));
        templateComboBox.setSelectedItem(prefs.get(templatekey,""));
        numOfPlayersTextField.setText(prefs.get(numOfPlayerskey,""));
        indexTextField.setText(prefs.get(indexkey, ""));
        protocolComboBox.setSelectedItem(prefs.get(protocolkey,""));

        String button=prefs.get(selectedButtonkey,"");
        if (button.equals("blank"))
        {
             blankRadioButton.setSelected(true);
             blankButtonSeleceted();
            
        }
        else if (button.equals("template"))
        {
            templateRadioButton.setSelected(true);
            templateButtonSeleceted();
            templateRadioButton.setFocusable(true);
        }
         else //file button
         {
            fileRadioButton.setSelected(true);
            fileButtonSeleceted();
            fileRadioButton.setFocusable(true);
         }

          inputSelectedButton=prefs.get(inputSelectedButtonkey,"");
        

    }



    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IPTextField;
    private javax.swing.JRadioButton blankRadioButton;
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton calcButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton compileButton;
    private javax.swing.JButton configurationBrowseButton;
    private javax.swing.JLabel configurationLabel;
    private javax.swing.JTextField configurationPathTextField;
    private javax.swing.JLabel connectUsingLabel;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JRadioButton fileRadioButton;
    private javax.swing.JPanel funcConf;
    private javax.swing.JEditorPane funcSourceEditorPane;
    private javax.swing.JLabel indexLabel;
    private javax.swing.JTextField indexTextField;
    private javax.swing.JPanel input;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton launchButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField numOfPlayersTextField;
    private javax.swing.JLabel playersLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JTextPane progressTextPane;
    private javax.swing.JComboBox protocolComboBox;
    private javax.swing.JLabel protocolLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel secretLabel;
    private javax.swing.JTextField secretTextField;
    private javax.swing.JRadioButton serverRadioButton;
    private javax.swing.JComboBox templateComboBox;
    private javax.swing.JRadioButton templateRadioButton;
    private javax.swing.JComboBox voteComboBox;
    private javax.swing.JLabel voteLabel;
    private javax.swing.JRadioButton xmlRadioButton;
    // End of variables declaration//GEN-END:variables


   //history fields
   public static final String ipKey = "ip";
   public static final String portKey="port";
   public static final String secretKey="secret";
     public static final String fileKey="file";
   public static final String funcKey="function";
   public static final String selectedButtonkey="button";
   public static final String inputSelectedButtonkey="inputButton";
   public static final String configurationFilekey="xmlFile";
   public static final String templatekey="template";
   public static final String numOfPlayerskey="numOfPlayers";
   public static final String indexkey="index";
   public static final String protocolkey="protocol";
  

   //history types
   private  static final int fileHistory=0;
   private static final int funcSourceHistory=1;
   private static final int serverHistory=2;
   private static final int secretHistory=3;
   private static final int selectedButtonHistory=4;
   private static final int inputSelectedButtonHistory=5;
   private static final int configurationFileHistory=6;
   private static final int templateHistory=7;
   private static final int numOfPlayersHistory=8;
   private static final int indexHistory=9;
   private static final int protocolHistory=10;


   private static String selectedButton="file";
   private static String inputSelectedButton="xml";
   public static Boolean voteSelected=false;
   public static Boolean equalitySelected=false;
   public static int noPlayers=0;
   public static Boolean cancelInit=false;
   
   //circuit fields
    public Circuit circuit;
    public static final int prime = 233;

    //Create a function file chooser
       private final JFileChooser fc = new JFileChooser();
       FileNameExtensionFilter filter = new FileNameExtensionFilter( "text files", "txt","rtf");

        //Create a xml file chooser
       private final JFileChooser xmlFc = new JFileChooser();
       FileNameExtensionFilter xmlFilter = new FileNameExtensionFilter( "xml files", "xml");

         private ProgressLog proglog;
         CalculationThread calculationThread;    
       

}
